
https://jrnold.github.io/r4ds-exercise-solutions/data-transformation.html#select-columns-with-select


library(tidyverse)

# Update tidyverse
tidyverse_update()

install.packages(c("nycflights13", "gapminder", "Lahman"))

library(ggplot2)
ggplot2::mpg

# Function argument is always the data. displ on x-axis and hwy on y-axis. geom_point create scatterplot

# We wanna see if engine size (displ) and fuel efficiency (hwy) are related. Yes, negative relationship.
# Bigger engine size means lower fuel efficiency
ggplot(data = mpg) +  geom_point(mapping = aes(x = displ, y = hwy))

ggplot(data = mpg) +  geom_point(mapping = aes(x = hwy, y = cyl))

# Drawing a scatterplot of dipl and hwy and taking a third variable class (which is categrory) as color-coded
ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy, color = class))



# alpha aesthetic controls the transparency of the points in grayscale
ggplot(data = mpg) +  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))

# Shape aesthetic would create diff shapes for diff class category
ggplot(data = mpg) +  geom_point(mapping = aes(x = displ, y = hwy, shape = class))

# we can also set the aesthetic properties of your geom manually. For e.g., we can make all of the points in our plot blue
ggplot(data = mpg) +  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")

# To set an aesthetic manually, set the aesthetic by name as an argument of your geom function; i.e., it goes outside of aes()


###########   Facets

# One way to add additional variables is with aesthetics. Another way, particularly useful for categorical variables, is to split
 # your plot into facets, subplots that each display one subset of the data.

# To facet your plot by a single variable, use facet_wrap().
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_wrap(~ class, nrow = 2)

# To facet your plot on the combination of two variables, add facet_grid() to your plot call.
ggplot(data = mpg) +
  geom_point(mapping = aes(x = displ, y = hwy)) +
  facet_grid(drv ~ cyl)



#####  Geometric Objects


# A geom is the geometrical object that a plot uses to represent data.

ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))

# Here geom_smooth() separates the cars into three lines based on their drv value, which describes a car’s drivetrain
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))

# ggplot2 provides over 30 geoms and more. See here https://www.ggplot2-exts.org

ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))

ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))

ggplot(data = mpg) +
  geom_smooth(  mapping = aes(x = displ, y = hwy, color = drv), show.legend = FALSE )

# To display multiple geoms in the same plot, add multiple geom functions to ggplot():
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth()

  
# If you place mappings in a geom function, ggplot2 will treat them as local mappings for the layer. It will use these mappings to
# extend or overwrite the global mappings for that layer only. 
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point(mapping = aes(color = class)) +
  geom_smooth() 
  
  
# Plot of Displ and hwy with drv shown in diff colors and with trend line. se when true shows the area of drv
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv))+  geom_point() +
    geom_smooth(se = FALSE))


####################   STATISTICAL TRANSFORMATIONS   ###############################

# geom_bar by default gives count. We can change it. check ?geom_bar
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut))


# you can re-create the previous plot using stat_count() instead of geom_bar():
  ggplot(data = diamonds) + stat_count(mapping = aes(x = cut))


  #We can change the default setting of geom_bar. For eg, we might want to   display a bar chart of proportion, rather than count:
  ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))




##### Position Adjustments

# We can also use color for histograms
ggplot(data = diamonds) +geom_bar(mapping = aes(x = cut, color = cut))

ggplot(data = diamonds) +geom_bar(mapping = aes(x = cut, fill = cut))


# if you map the fill aesthetic to another variable, like clarity: the bars are automatically stacked.
# Each colored rectangle represents a combination of cut and clarity:
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity))



ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")


ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")



########################     Coordinate Systems    ##################################

# Making a boxplot. Coord_flip makes the bloxplots horizontal
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot()


ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip()


# coord_quickmap() sets the aspect ratio correctly for maps. This is very important if you’re plotting spatial data with ggplot2
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
  geom_polygon(fill = "white", color = "black")
  
ggplot(nz, aes(long, lat, group = group)) +
  geom_polygon(fill = "white", color = "black") +
  coord_quickmap()




# coord_polar() uses polar coordinates. Polar coordinates revealan interesting connection between a bar chart and a Coxcomb
# chart. We can make donut chart and pie chart
bar <- ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = cut),
    show.legend = FALSE, width = 1) + theme(aspect.ratio = 1) + labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()



# Layered Grammar of Graphics. let’s add position adjustments, stats, coordinate systems, and faceting to
# our code template:
  ggplot(data = <DATA>) +
  <GEOM_FUNCTION>(
    mapping = aes(<MAPPINGS>),
    stat = <STAT>,
    position = <POSITION>
  ) +
  <COORDINATE_FUNCTION> +
  <FACET_FUNCTION>












