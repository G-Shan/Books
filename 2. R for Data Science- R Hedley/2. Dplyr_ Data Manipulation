

https://jrnold.github.io/r4ds-exercise-solutions/data-transformation.html#select-columns-with-select

rm(list = ls())
library(nycflights13)
library(tidyverse)
flights= nycflights13::flights

names(flights)

glimpse(flights)

#Select all the flights on Jan 1st. It will print the results but wont create a dataset
filter(flights, month == 1, day == 1)

#Here it will create a new df jan1. But it wont print the results
jan1 = filter(flights, month == 1, day == 1)


#R either prints out the results, or saves them to a variable. If you want to do both, you can wrap the assignment in parentheses:
(dec25 <- filter(flights, month == 12, day == 25))

#FLights departed in November or December
nov_dec1 = filter(flights, month == 11 | month == 12)

# useful shorthand for this problem is x %in% y. It will select a subset which has a flight either in November & December
nov_dec <- filter(flights, month %in% c(11, 12))



# if you wanted to find flights that weren’t delayed (on arrival or departure) by more than two hours, you could use either of 
# the following two filters:
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)


#Flights that have dep_time as missing
filter(flights, is.na(dep_time) )
names(flights)

# Flights that Had an arrival or delay of two or more hours
filter(flights, dep_delay>120 | arr_delay >120)


# FLights that Flew to Houston (IAH or HOU)
Houston = filter(flights, dest=="IAH" | dest == "HOU")
  
# Flights that Were operated by United, American, or Delta
filter(flights, carrier %in% c("AA", "DL", "UA"))


# Flights that Departed in summer (July, August, and September)
summer = filter(flights, month %in% c(7,8,9)) #7 is July and 9 is September

# Flights Arrived more than two hours late, but didn’t leave late
filter(flights, !is.na(dep_delay), dep_delay <= 0, arr_delay > 120)


# Flights that departed between midnight and 6am (inclusive).
filter(flights, dep_time >= 0, dep_time <= 600)
filter(flights, between(dep_time, 0, 600))  #OR we can use BETWEEN argument as well

# Flights that Arrived more than two hours late, but didn’t leave late
fll = filter(flights, arr_delay >120, dep_delay==0)




##########################    ARRANGE()     #############################
# arrange() works similarly to filter() except that instead of selecting rows, it changes their order. It takes a data frame
# and a set of column names (or more complicated expressions) to order by. If you provide more than one column name, each
# additional column will be used to break ties in the values of preceding columns:

arrange(flights, year, month, day)


# Use desc() to reorder by a column in descending order:
arrange(flights, desc(arr_delay))

# Missing values are always sorted at the end:
df <- tibble(x = c(5, 2, NA))
arrange(df, x)

# sort all missing values to the start
arrange(df, desc(is.na(x)))

#FLigths with longest distances in deescending order
long_dist = arrange(flights, desc(distance))

# Sort flights to find the most delayed flights. Find the flights that left earliest
arrange(flights, desc(arr_delay))
arrange(flights, arr_delay)

# Arranging the flights according to year, month & date. In ascending order
arrange(flights, year, month, day)

# rename is used to rename  a variable
rename(flights, tail_num = tailnum)



####################  Select Columns with select()    ########################

# Select columns by name
select(flights, year, month, day)

# Select all columns between year and day (inclusive). It will also select columns thta are b/w year & day
select(flights, year:day)


# Select all columns except those from year to day (inclusive). It will also remove columns that lie b/w year & day
select(flights, -(year:day))

There are a number of helper functions you can use within
select():
• starts_with("abc") matches names that begin with “abc”.
• ends_with("xyz") matches names that end with “xyz”.
• contains("ijk") matches names that contain “ijk”.
• matches("(.)\\1") selects variables that match a regular
expression. This one matches any variables that contain repeated characters.
• num_range("x", 1:3) matches x1, x2, and x3.


# We can also rename a variable using rename function. Here we change tailnum to tail_num
rename(flights, tail_num = tailnum)

# Another option is to use select() in conjunction with the every thing() helper. This is useful if you have a handful of
# variables you’d like to move to the start of the data frame:
select(flights, time_hour, air_time, everything())

# It will include all the variables that have time in their names. dplyr ignores the upper/lower case & select vars with time in name
select(flights, contains("TIME"))

# To select only vars that have uppercase TIME, we need to use ignore.case = FALSE. Now no variable is selected
select(flights, contains("TIME", ignore.case = FALSE))


# Brainstorm as many ways as possible to select dep_time, dep_delay, arr_time, and arr_delay from flights.
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with("dep_"), starts_with("arr_"))
select(flights, matches("^(dep|arr)_(time|delay)$"))
# using ends_with() doesn’t work well since it would return both sched_arr_time and sched_dep_time


#################  Add New Variables with mutate()    #################

# Selecting a subset only of 7 variables year, month, day, vars with delay suffix, distance & airtime
flights_sml <- select(flights, year:day,ends_with("delay"), distance, air_time)

# mutate() always adds new columns at the end of your dataset flight_sml. gain & spped would be added
topkek = mutate(flights_sml,gain = arr_delay - dep_delay, speed = distance / air_time * 60)

# If you only want to keep the new variables, use transmute(). Here we would have only gain & speed
topkek1 = transmute(flights_sml,gain = arr_delay - dep_delay, speed = distance / air_time * 60)

# We can also subset columns using one_of() as vectors
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))




##############   Grouped Summaries with summarize()   #####################

# summarize() is paired with group_by() and collapses a data frame to a single row aka grouped summaries
# It will show Year, month, day & delay columns where delay would mean dep_delay for each day
by_day = group_by(flights, year, month, day)
summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))




########### Pipe Operator %>%  ################

# The pipe operator in R, represented by %>% can be used to chain code together. It is very useful 
# when you are performing several operations on data, and don’t want to save the output at each intermediate step.


#For example, let’s say we want to remove all the data corresponding to Month = 5, group the data by month, and then find
# the mean of the temperature each month. The conventional way to write the code for this would be:
  
library(datasets)
filteredData <- filter(airquality, Month != 5)
groupedData <- group_by(filteredData, Month)
summarise(groupedData, mean(Temp, na.rm = TRUE))

#With piping, the above code can be rewritten as:
airquality %>% 
 filter(Month != 5) %>% 
 group_by(Month) %>% 
 summarise(mean(Temp, na.rm = TRUE))


################      Counts      #############################

#Whenever you do any aggregation, it’s always a good idea to include either a count (n()), or a count of nonmissing values
#(sum(!is.na(x))). That way you can check that you’re not drawing conclusions based on very small amounts of data.




################      Useful Summary Functions      #############################

not_cancelled <- flights %>%
  filter(!is.na(dep_delay), !is.na(arr_delay))

# Which destinations have the most carriers. We use N-distinct to get unique values of carriers
not_cancelled %>%
  group_by(dest) %>%
  summarize(carriers = n_distinct(carrier)) %>%
  arrange(desc(carriers))

# Counts are so useful that dplyr provides a simple helper if all you want is a count:
not_cancelled %>%  count(dest)

# Using weight variable (wt) you could use this to “count” (sum) the total number of miles a plane flew:
not_cancelled %>%   count(tailnum, wt = distance)

# How many flights left before 5am? (these usually indicate delayed flights from the previous day)
# When used with numeric functions, TRUE is converted to 1 and FALSE to 0. This makes sum() and mean() very useful
not_cancelled %>%
  group_by(year, month, day) %>%
  summarize(n_early = sum(dep_time < 500))

# What proportion of flights are delayed by more than an hour?
not_cancelled %>%
  group_by(year, month, day) %>%
  summarize(hour_perc = mean(arr_delay > 60))



###################     Grouping by Multiple Variables      ###################################

# When you group by multiple variables, each summary peels off one
# level of the grouping. That makes it easy to progressively roll up a dataset:

daily <- group_by(flights, year, month, day)
per_day <- summarize(daily, flights = n())
per_month <- summarize(per_day, flights = sum(flights))
per_year <- summarize(per_month, flights = sum(flights))

# If you need to remove grouping, and return to operations on ungrouped data, use ungroup():
daily %>%
  ungroup() %>% # no longer grouped by date
  summarize(flights = n()) # all flights




###############################      Some Questions      ##########################

# Come up with another approach that will give you the same output as not_cancelled %>% count(dest) and not_cancel
# led %>% count(tailnum, wt = distance) (without using count()).

# The data frame not_cancelled is defined in the chapter as,
not_cancelled <- flights %>% filter(!is.na(dep_delay), !is.na(arr_delay))

# We can also get same result by grouping the destinations and then taking count of its observations
not_cancelled %>%
  group_by(dest) %>%
  summarise(n = n())


# Look at the number of canceled flights per day. Is there a pattern? Is proportion of canceled flights related to the avg delay?
canceled_delayed =  flights %>%
  mutate(canceled = (is.na(arr_delay) | is.na(dep_delay))) %>%
  group_by(year, month, day) %>%
  summarise(prop_canceled = mean(canceled),
            avg_dep_delay = mean(dep_delay, na.rm = TRUE))

ggplot(canceled_delayed, aes(x = avg_dep_delay, prop_canceled)) +
  geom_point() +
  geom_smooth()


# Which carrier has the worst delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers?
flights %>%  group_by(carrier) %>%
  summarise(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
  arrange(desc(arr_delay))

filter(airlines, carrier == "F9")


# For each plane, count the number of flights before the first delay of greater than 1 hour.
flights %>%  arrange(tailnum, year, month, day) %>%
  group_by(tailnum) %>%
  mutate(delay_gt1hr = dep_delay > 60) %>%
  mutate(before_delay = cumsum(delay_gt1hr)) %>%
  filter(before_delay < 1) %>%
  count(sort = TRUE)




##############################        Grouped Mutates (and Filters)     page-73   ###############################



rm(list = ls())

library(nycflights13)
library(tidyverse)
flights= nycflights13::flights




# Selecting a subset only of 7 variables year, month, day, vars with delay suffix, distance & airtime
flights_sml <- select(flights, year:day,ends_with("delay"), distance, air_time)


# Find the worst members of each group:
flights_sml %>%
  group_by(year, month, day) %>%
  filter(rank(desc(arr_delay)) < 10)


# Which plane (tailnum) has the worst on-time record?
flights %>%
  group_by(tailnum) %>%
  summarise(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
  filter(rank(desc(arr_delay)) <= 1)




# What time of day should you fly if you want to avoid delays as much as possible?
  
# Let’s group by hour. The earlier the better to fly. This is intuitive as delays early in the morning are likely to propagate throughout the day.

flights %>%
  group_by(hour) %>%
  summarise(arr_delay = mean(arr_delay, na.rm = TRUE)) %>%
  arrange(arr_delay)




# For each destination, compute the total minutes of delay. For each, flight, compute the proportion of the total delay for its destination.
flights %>%
  filter(!is.na(arr_delay), arr_delay > 0) %>%  
  group_by(dest) %>%
  mutate(total_delay = sum(arr_delay),
         prop_delay = arr_delay / sum(arr_delay))


# Alternatively, consider the delay as relative to the minimum delay for any flight to that destination. Now all non-canceled flights have a proportion.flights %>%
  filter(!is.na(arr_delay), arr_delay > 0) %>%  
  group_by(dest) %>%
  mutate(total_delay = sum(arr_delay - min(arr_delay)),
         prop_delay = arr_delay / sum(arr_delay))


  
  
  #Find all destinations that are flown by at least two carriers. Use that information to rank the carriers.
  
# The carrier that flies to the most locations is ExpressJet Airlines (EV). ExpressJet is a regional airline and partner for major airlines, so its one of those that flies small planes to close airports
  
  flights %>%
    group_by(dest, carrier) %>%
    count(carrier) %>%
    group_by(carrier) %>%
    count(sort = TRUE)




  
  
  













