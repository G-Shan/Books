
Variable and their type:- 

Identifier
LeadID
Industry - Categorical (9 Categories)
Bank_Name - Categorical (32 Categories)
description - Categorical (text sentences; we do bag of words on this)
transaction_type - Categorical (debit/credit)
amount - numeric
B2C_KW_Category - Categorical (Response variable, 40 labels)
Yodlee_Category- Categorical (57 Categories)



import numpy as np
import pandas as pd
import time

data = pd.read_csv("F:/Yodlee/NLP Python/AL/for cv/data.csv",encoding = "ISO-8859-1")


print(" I am Here !! ")

##### Cleaning the text

import re
import nltk

#nltk.download('stopwords')
#nltk.download()

print(" Download has been completed !!! ")

from nltk.corpus import stopwords

from nltk.stem.porter import PorterStemmer

# Now we would for loop to go through same cleaning process for all observations
print("Text processing begins here !!")

prev_epoch = int(time.time())

corpus = []
for i in range(0, data.shape[0]):
    description = re.sub('[^a-zA-Z]', ' ', data['description'][i])
    description = description.lower()
    description = description.split()
    ps = PorterStemmer()
    description = [ps.stem(word) for word in description if not word in set(stopwords.words('english'))]
    description = ' '.join(description)
    corpus.append(description)

curr_epoch = int(time.time())

print( curr_epoch- prev_epoch )

print(len(corpus))

print("Creating the bag of words model")


##################
print("Starting Execution ...")

import numpy as np

from sklearn.feature_extraction.text import CountVectorizer


cv = CountVectorizer(min_df=.0025, stop_words='english')
X = cv.fit_transform(corpus).toarray()

print(len(cv.get_feature_names())) 


X1 = pd.DataFrame(X)

print(" Done !!")


###########################
import numpy as np

data = pd.get_dummies(data=data, columns=['Bank_Name','Industry','transaction_type', 'Yodlee_Category'])

#data.to_csv("F:/Yodlee/NLP Python/AL/ColumnOrder.csv")

print(len(data.columns))

df = pd.concat([X1, data], axis=1)
    
y = df['B2C_KW_Category']



df = df.drop(['Identifier','LeadID','description', 'B2C_KW_Category'], axis =1)


#############################
XX = df.iloc[:].values   
    
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
labelenc_y = LabelEncoder()

y1 = labelenc_y.fit_transform(y)

print(labelenc_y.classes_)


#####################################
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(XX, y1, test_size=0.25, random_state=0)

print(" About to train model ....")

from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

classifier = RandomForestClassifier(n_estimators = 300, criterion = 'entropy', random_state=0,n_jobs=-1)

classifier.fit(X_train, y_train)

print("Training is done !!!")

y_pred = classifier.predict(X_test)

print(accuracy_score(y_test,y_pred))


from sklearn.metrics import confusion_matrix
cm = confusion_matrix( labelenc_y.inverse_transform(y_test),labelenc_y.inverse_transform(y_pred) )

df = pd.DataFrame()
df['values'] = pd.Series(labelenc_y.inverse_transform(y_test)).unique()
df1 = pd.DataFrame(cm,columns=list(pd.Series(labelenc_y.inverse_transform(y_test)).unique()))
df2 = pd.concat([df,df1],axis=1)
df2.to_csv("F:/Yodlee/NLP Python/AL/for cv/ModelResult.csv")



############################

test_data = pd.read_csv("F:/Yodlee/NLP Python/AL/for cv/data2.csv",encoding = "ISO-8859-1")

temp_df = test_data

print(test_data.columns)

test_corpus = []

print("Test Corpus processing begins .....")

for i in range(0, test_data.shape[0]):
    description = re.sub('[^a-zA-Z]', ' ',str( test_data['description'][i]))
    description = description.lower()
    description = description.split()
    ps = PorterStemmer()
    description = [ps.stem(word) for word in description if not word in set(stopwords.words('english'))]
    description = ' '.join(description)
    test_corpus.append(description)
    
print("processing done !!")

###########################
cv_test = CountVectorizer(vocabulary=cv.get_feature_names(),min_df=.0025, stop_words='english')

test_mat = cv_test.fit_transform(test_corpus).toarray()

print(len(cv_test.get_feature_names()))

test_df = pd.DataFrame(test_mat)

test_data = pd.get_dummies(data=test_data, columns=['Bank_Name','Industry', 'transaction_type', 'Yodlee_Category'])

missing_cols = set( data.columns ) - set( test_data.columns )

for c in missing_cols:
    test_data[c] = 0

test_data = test_data[data.columns]

print(len(test_data.columns))



test_data = test_data.drop(['Identifier','LeadID','description','B2C_KW_Category'],axis=1)


######################################
final_df = pd.concat([test_df, test_data], axis=1)

matrix = final_df.iloc[:].values

y_predicted = classifier.predict(matrix)


#########################################
values = labelenc_y.inverse_transform(y_predicted)

print(values)


##########################################
temp_df['Predicted'] = values

temp_df.to_csv("F:/Yodlee/NLP Python/AL/for cv/pred33.csv")

