
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# We need to ignore the double quotes in dataset using quoting=3
df = pd.read_csv('Restaurant_Reviews.tsv', delimiter='\t', quoting=3)


df['Review'][0]

##### Cleaning the text
import re
import nltk
# nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

'''
# Remove everything except capital and small letter. Replace these removed character with a space
review = re.sub('[^a-zA-Z]', ' ', df['Review'][0] )
review = review.lower()

# This would split the review into diff words and make alist of words
review = review.split()

ps = PorterStemmer() # For Stemming

# Removing the english stopwords and stem them
review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]

# Converting our words list into string. double comma is used for space b/w words
review = ' '.join(review)
'''

# Now we would for loop to go through same cleaning process for all observations
corpus = []
for i in range(0, 1000):
    review = re.sub('[^a-zA-Z]', ' ', df['Review'][i])
    review = review.lower()
    review = review.split()
    ps = PorterStemmer()
    review = [ps.stem(word) for word in review if not word in set(stopwords.words('english'))]
    review = ' '.join(review)
    corpus.append(review)
    

# Creating the bag of words model
from sklearn.feature_extraction.text import CountVectorizer 
cv = CountVectorizer(max_features=1500)

# We have added array to create sparse matrxi
X = cv.fit_transform(corpus).toarray()
y = df.iloc[:, 1].values


# Splitting the dataset into training and test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)



from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)



